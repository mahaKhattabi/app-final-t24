{"version":3,"file":"restful-react.esm.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/Context.tsx","../src/util/composeUrl.ts","../src/util/processResponse.ts","../src/util/resolveData.ts","../src/Get.tsx","../src/Poll.tsx","../src/Mutate.tsx","../src/util/useDeepCompareEffect.ts","../src/useAbort.ts","../src/useGet.tsx","../src/useMutate.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import noop from \"lodash/noop\";\nimport * as React from \"react\";\nimport { ResolveFunction } from \"./Get\";\n\nexport interface RestfulReactProviderProps<TData = any> {\n  /** The backend URL where the RESTful resources live. */\n  base: string;\n  /**\n   * The path that gets accumulated from each level of nesting\n   * taking the absolute and relative nature of each path into consideration\n   */\n  parentPath?: string;\n  /**\n   * A function to resolve data return from the backend, most typically\n   * used when the backend response needs to be adapted in some way.\n   */\n  resolve?: ResolveFunction<TData>;\n  /**\n   * Options passed to the fetch request.\n   */\n  requestOptions?: (() => Partial<RequestInit> | Promise<Partial<RequestInit>>) | Partial<RequestInit>;\n  /**\n   * Trigger on each error.\n   * For `Get` and `Mutation` calls, you can also call `retry` to retry the exact same request.\n   * Please note that it's quite hard to retrieve the response data after a retry mutation in this case.\n   * Depending of your case, it can be easier to add a `localErrorOnly` on your `Mutate` component\n   * to deal with your retry locally instead of in the provider scope.\n   */\n  onError?: (\n    err: {\n      message: string;\n      data: TData | string;\n      status?: number;\n    },\n    retry: () => Promise<TData | null>,\n    response?: Response,\n  ) => void;\n  /**\n   * Any global level query params?\n   * **Warning:** it's probably not a good idea to put API keys here. Consider headers instead.\n   */\n  queryParams?: { [key: string]: any };\n}\n\nexport const Context = React.createContext<Required<RestfulReactProviderProps>>({\n  base: \"\",\n  parentPath: \"\",\n  resolve: (data: any) => data,\n  requestOptions: {},\n  onError: noop,\n  queryParams: {},\n});\n\nexport interface InjectedProps {\n  onError: RestfulReactProviderProps[\"onError\"];\n}\n\nexport default class RestfulReactProvider<T> extends React.Component<RestfulReactProviderProps<T>> {\n  public static displayName = \"RestfulProviderContext\";\n\n  public render() {\n    const { children, ...value } = this.props;\n    return (\n      <Context.Provider\n        value={{\n          onError: noop,\n          resolve: (data: any) => data,\n          requestOptions: {},\n          parentPath: \"\",\n          queryParams: value.queryParams || {},\n          ...value,\n        }}\n      >\n        {children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const RestfulReactConsumer = Context.Consumer;\n","import url from \"url\";\n\nexport const composeUrl = (base: string = \"\", parentPath: string = \"\", path: string = \"\"): string => {\n  const composedPath = composePath(parentPath, path);\n  /* If the base is empty, preceding slash will be trimmed during composition */\n  if (base === \"\" && composedPath.startsWith(\"/\")) {\n    return composedPath;\n  }\n\n  /* If the base contains a trailing slash, it will be trimmed during composition */\n  return base!.endsWith(\"/\") ? `${base!.slice(0, -1)}${composedPath}` : `${base}${composedPath}`;\n};\n\n/**\n * If the path starts with slash, it is considered as absolute url.\n * If not, it is considered as relative url.\n * For example,\n * parentPath = \"/someBasePath\" and path = \"/absolute\" resolves to \"/absolute\"\n * whereas,\n * parentPath = \"/someBasePath\" and path = \"relative\" resolves to \"/someBasePath/relative\"\n */\nexport const composePath = (parentPath: string = \"\", path: string = \"\"): string => {\n  if (path.startsWith(\"/\") && path.length > 1) {\n    return url.resolve(parentPath, path);\n  } else if (path !== \"\" && path !== \"/\") {\n    return `${parentPath}/${path}`;\n  } else {\n    return parentPath;\n  }\n};\n","export const processResponse = async (response: Response) => {\n  if (response.status === 204) {\n    return { data: undefined, responseError: false };\n  }\n  if ((response.headers.get(\"content-type\") || \"\").includes(\"application/json\")) {\n    try {\n      return {\n        data: await response.json(),\n        responseError: false,\n      };\n    } catch (e) {\n      return {\n        data: e.message,\n        responseError: true,\n      };\n    }\n  } else {\n    return {\n      data: await response.text(),\n      responseError: false,\n    };\n  }\n};\n","import { GetDataError, ResolveFunction } from \"../types\";\n\nexport const resolveData = async <TData, TError>({\n  data,\n  resolve,\n}: {\n  data: any;\n  resolve?: ResolveFunction<TData>;\n}): Promise<{ data: TData | null; error: GetDataError<TError> | null }> => {\n  let resolvedData: TData | null = null;\n  let resolveError: GetDataError<TError> | null = null;\n  try {\n    if (resolve) {\n      const resolvedDataOrPromise: TData | Promise<TData> = resolve(data);\n      resolvedData = (resolvedDataOrPromise as { then?: any }).then\n        ? ((await resolvedDataOrPromise) as TData)\n        : (resolvedDataOrPromise as TData);\n    } else {\n      resolvedData = data;\n    }\n  } catch (err) {\n    resolvedData = null;\n    resolveError = {\n      message: \"RESOLVE_ERROR\",\n      data: JSON.stringify(err),\n    };\n  }\n  return {\n    data: resolvedData,\n    error: resolveError,\n  };\n};\n","import { DebounceSettings } from \"lodash\";\nimport debounce from \"lodash/debounce\";\nimport isEqual from \"lodash/isEqual\";\nimport * as qs from \"qs\";\nimport * as React from \"react\";\n\nimport RestfulReactProvider, { InjectedProps, RestfulReactConsumer, RestfulReactProviderProps } from \"./Context\";\nimport { composePath, composeUrl } from \"./util/composeUrl\";\nimport { processResponse } from \"./util/processResponse\";\nimport { resolveData } from \"./util/resolveData\";\n\n/**\n * A function that resolves returned data from\n * a fetch call.\n */\nexport type ResolveFunction<TData> = (data: any) => TData;\n\nexport interface GetDataError<TError> {\n  message: string;\n  data: TError | string;\n  status?: number;\n}\n\n/**\n * An enumeration of states that a fetchable\n * view could possibly have.\n */\nexport interface States<TData, TError> {\n  /** Is our view currently loading? */\n  loading: boolean;\n  /** Do we have an error in the view? */\n  error?: GetState<TData, TError>[\"error\"];\n}\n\nexport type GetMethod<TData> = () => Promise<TData | null>;\n\n/**\n * An interface of actions that can be performed\n * within Get\n */\nexport interface Actions<TData> {\n  /** Refetches the same path */\n  refetch: GetMethod<TData>;\n}\n\n/**\n * Meta information returned to the fetchable\n * view.\n */\nexport interface Meta {\n  /** The entire response object passed back from the request. */\n  response: Response | null;\n  /** The absolute path of this request. */\n  absolutePath: string;\n}\n\n/**\n * Props for the <Get /> component.\n */\nexport interface GetProps<TData, TError, TQueryParams> {\n  /**\n   * The path at which to request data,\n   * typically composed by parent Gets or the RestfulProvider.\n   */\n  path: string;\n  /**\n   * @private This is an internal implementation detail in restful-react, not meant to be used externally.\n   * This helps restful-react correctly override `path`s when a new `base` property is provided.\n   */\n  __internal_hasExplicitBase?: boolean;\n  /**\n   * A function that recieves the returned, resolved\n   * data.\n   *\n   * @param data - data returned from the request.\n   * @param actions - a key/value map of HTTP verbs, aliasing destroy to DELETE.\n   */\n  children: (data: TData | null, states: States<TData, TError>, actions: Actions<TData>, meta: Meta) => React.ReactNode;\n  /** Options passed into the fetch call. */\n  requestOptions?: RestfulReactProviderProps[\"requestOptions\"];\n  /**\n   * Query parameters\n   */\n  queryParams?: TQueryParams;\n  /**\n   * Don't send the error to the Provider\n   */\n  localErrorOnly?: boolean;\n  /**\n   * A function to resolve data return from the backend, most typically\n   * used when the backend response needs to be adapted in some way.\n   */\n  resolve?: ResolveFunction<TData>;\n  /**\n   * Should we wait until we have data before rendering?\n   * This is useful in cases where data is available too quickly\n   * to display a spinner or some type of loading state.\n   */\n  wait?: boolean;\n  /**\n   * Should we fetch data at a later stage?\n   */\n  lazy?: boolean;\n  /**\n   * An escape hatch and an alternative to `path` when you'd like\n   * to fetch from an entirely different URL.\n   *\n   */\n  base?: string;\n  /**\n   * The accumulated path from each level of parent GETs\n   *  taking the absolute and relative nature of each path into consideration\n   */\n  parentPath?: string;\n  /**\n   * How long do we wait between subsequent requests?\n   * Uses [lodash's debounce](https://lodash.com/docs/4.17.10#debounce) under the hood.\n   */\n  debounce?:\n    | {\n        wait?: number;\n        options: DebounceSettings;\n      }\n    | boolean\n    | number;\n}\n\n/**\n * State for the <Get /> component. These\n * are implementation details and should be\n * hidden from any consumers.\n */\nexport interface GetState<TData, TError> {\n  data: TData | null;\n  response: Response | null;\n  error: GetDataError<TError> | null;\n  loading: boolean;\n}\n\n/**\n * The <Get /> component without Context. This\n * is a named class because it is useful in\n * debugging.\n */\nclass ContextlessGet<TData, TError, TQueryParams> extends React.Component<\n  GetProps<TData, TError, TQueryParams> & InjectedProps,\n  Readonly<GetState<TData, TError>>\n> {\n  constructor(props: GetProps<TData, TError, TQueryParams> & InjectedProps) {\n    super(props);\n\n    if (typeof props.debounce === \"object\") {\n      this.fetch = debounce(this.fetch, props.debounce.wait, props.debounce.options);\n    } else if (typeof props.debounce === \"number\") {\n      this.fetch = debounce(this.fetch, props.debounce);\n    } else if (props.debounce) {\n      this.fetch = debounce(this.fetch);\n    }\n  }\n\n  /**\n   * Abort controller to cancel the current fetch query\n   */\n  private abortController = new AbortController();\n  private signal = this.abortController.signal;\n\n  public readonly state: Readonly<GetState<TData, TError>> = {\n    data: null, // Means we don't _yet_ have data.\n    response: null,\n    loading: !this.props.lazy,\n    error: null,\n  };\n\n  public static defaultProps = {\n    base: \"\",\n    parentPath: \"\",\n    resolve: (unresolvedData: any) => unresolvedData,\n    queryParams: {},\n  };\n\n  public componentDidMount() {\n    if (!this.props.lazy) {\n      this.fetch();\n    }\n  }\n\n  public componentDidUpdate(prevProps: GetProps<TData, TError, TQueryParams>) {\n    const { base, parentPath, path, resolve, queryParams } = prevProps;\n    if (\n      base !== this.props.base ||\n      parentPath !== this.props.parentPath ||\n      path !== this.props.path ||\n      !isEqual(queryParams, this.props.queryParams) ||\n      // both `resolve` props need to _exist_ first, and then be equivalent.\n      (resolve && this.props.resolve && resolve.toString() !== this.props.resolve.toString())\n    ) {\n      if (!this.props.lazy) {\n        this.fetch();\n      }\n    }\n  }\n\n  public componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  public getRequestOptions = async (\n    extraOptions?: Partial<RequestInit>,\n    extraHeaders?: boolean | { [key: string]: string },\n  ) => {\n    const { requestOptions } = this.props;\n\n    if (typeof requestOptions === \"function\") {\n      const options = (await requestOptions()) || {};\n      return {\n        ...extraOptions,\n        ...options,\n        headers: new Headers({\n          ...(typeof extraHeaders !== \"boolean\" ? extraHeaders : {}),\n          ...(extraOptions || {}).headers,\n          ...options.headers,\n        }),\n      };\n    }\n\n    return {\n      ...extraOptions,\n      ...requestOptions,\n      headers: new Headers({\n        ...(typeof extraHeaders !== \"boolean\" ? extraHeaders : {}),\n        ...(extraOptions || {}).headers,\n        ...(requestOptions || {}).headers,\n      }),\n    };\n  };\n\n  public fetch = async (requestPath?: string, thisRequestOptions?: RequestInit) => {\n    const { base, __internal_hasExplicitBase, parentPath, path, resolve } = this.props;\n    if (this.state.error || !this.state.loading) {\n      this.setState(() => ({ error: null, loading: true }));\n    }\n\n    const makeRequestPath = () => {\n      let url: string;\n      if (__internal_hasExplicitBase) {\n        url = composeUrl(base!, \"\", path || \"\");\n      } else {\n        url = composeUrl(base!, parentPath!, requestPath || path || \"\");\n      }\n\n      // We use ! because it's in defaultProps\n      if (Object.keys(this.props.queryParams!).length) {\n        url += `?${qs.stringify(this.props.queryParams)}`;\n      }\n      return url;\n    };\n\n    const request = new Request(makeRequestPath(), await this.getRequestOptions(thisRequestOptions));\n    try {\n      const response = await fetch(request, { signal: this.signal });\n      const { data, responseError } = await processResponse(response);\n\n      // avoid state updates when component has been unmounted\n      if (this.signal.aborted) {\n        return;\n      }\n\n      if (!response.ok || responseError) {\n        const error = {\n          message: `Failed to fetch: ${response.status} ${response.statusText}${responseError ? \" - \" + data : \"\"}`,\n          data,\n          status: response.status,\n        };\n\n        this.setState({\n          loading: false,\n          error,\n        });\n\n        if (!this.props.localErrorOnly && this.props.onError) {\n          this.props.onError(error, () => this.fetch(requestPath, thisRequestOptions), response);\n        }\n\n        return null;\n      }\n\n      const resolved = await resolveData<TData, TError>({ data, resolve });\n\n      this.setState({ loading: false, data: resolved.data, error: resolved.error });\n      return data;\n    } catch (e) {\n      // avoid state updates when component has been unmounted\n      // and when fetch/processResponse threw an error\n      if (this.signal.aborted) {\n        return;\n      }\n\n      this.setState({\n        loading: false,\n        error: {\n          message: `Failed to fetch: ${e.message}`,\n          data: e,\n        },\n      });\n    }\n  };\n\n  public render() {\n    const { children, wait, path, base, parentPath } = this.props;\n    const { data, error, loading, response } = this.state;\n\n    if (wait && data === null && !error) {\n      return <></>; // Show nothing until we have data.\n    }\n\n    return children(\n      data,\n      { loading, error },\n      { refetch: this.fetch },\n      { response, absolutePath: composeUrl(base!, parentPath!, path) },\n    );\n  }\n}\n\n/**\n * The <Get /> component _with_ context.\n * Context is used to compose path props,\n * and to maintain the base property against\n * which all requests will be made.\n *\n * We compose Consumers immediately with providers\n * in order to provide new `parentPath` props that contain\n * a segment of the path, creating composable URLs.\n */\nfunction Get<TData = any, TError = any, TQueryParams = { [key: string]: any }>(\n  props: GetProps<TData, TError, TQueryParams>,\n) {\n  return (\n    <RestfulReactConsumer>\n      {contextProps => (\n        <RestfulReactProvider {...contextProps} parentPath={composePath(contextProps.parentPath, props.path)}>\n          <ContextlessGet\n            {...contextProps}\n            {...props}\n            queryParams={{ ...contextProps.queryParams, ...props.queryParams }}\n            __internal_hasExplicitBase={Boolean(props.base)}\n          />\n        </RestfulReactProvider>\n      )}\n    </RestfulReactConsumer>\n  );\n}\n\nexport default Get;\n","import merge from \"lodash/merge\";\nimport * as qs from \"qs\";\nimport * as React from \"react\";\nimport equal from \"react-fast-compare\";\n\nimport { InjectedProps, RestfulReactConsumer } from \"./Context\";\nimport { GetProps, GetState, Meta as GetComponentMeta } from \"./Get\";\nimport { composeUrl } from \"./util/composeUrl\";\nimport { processResponse } from \"./util/processResponse\";\n\n/**\n * Meta information returned from the poll.\n */\ninterface Meta extends GetComponentMeta {\n  /**\n   * The entire response object.\n   */\n  response: Response | null;\n}\n\n/**\n * States of the current poll\n */\ninterface States<TData, TError> {\n  /**\n   * Is the component currently polling?\n   */\n  polling: PollState<TData, TError>[\"polling\"];\n  /**\n   * Is the initial request loading?\n   */\n  loading: PollState<TData, TError>[\"loading\"];\n  /**\n   * Has the poll concluded?\n   */\n  finished: PollState<TData, TError>[\"finished\"];\n  /**\n   * Is there an error? What is it?\n   */\n  error: PollState<TData, TError>[\"error\"];\n}\n\n/**\n * Actions that can be executed within the\n * component.\n */\ninterface Actions {\n  start: () => void;\n  stop: () => void;\n}\n\n/**\n * Props that can control the Poll component.\n */\nexport interface PollProps<TData, TError, TQueryParams> {\n  /**\n   * What path are we polling on?\n   */\n  path: GetProps<TData, TError, TQueryParams>[\"path\"];\n  /**\n   * A function that gets polled data, the current\n   * states, meta information, and various actions\n   * that can be executed at the poll-level.\n   */\n  children: (data: TData | null, states: States<TData, TError>, actions: Actions, meta: Meta) => React.ReactNode;\n  /**\n   * How long do we wait between repeating a request?\n   * Value in milliseconds.\n   *\n   * Defaults to 1000.\n   */\n  interval?: number;\n  /**\n   * How long should a request stay open?\n   * Value in seconds.\n   *\n   * Defaults to 60.\n   */\n  wait?: number;\n  /**\n   * A stop condition for the poll that expects\n   * a boolean.\n   *\n   * @param data - The data returned from the poll.\n   * @param response - The full response object. This could be useful in order to stop polling when !response.ok, for example.\n   */\n  until?: (data: TData | null, response: Response | null) => boolean;\n  /**\n   * Are we going to wait to start the poll?\n   * Use this with { start, stop } actions.\n   */\n  lazy?: GetProps<TData, TError, TQueryParams>[\"lazy\"];\n  /**\n   * Should the data be transformed in any way?\n   */\n  resolve?: (data: any, prevData: TData | null) => TData;\n  /**\n   * We can request foreign URLs with this prop.\n   */\n  base?: GetProps<TData, TError, TQueryParams>[\"base\"];\n  /**\n   * Any options to be passed to this request.\n   */\n  requestOptions?: GetProps<TData, TError, TQueryParams>[\"requestOptions\"];\n  /**\n   * Query parameters\n   */\n  queryParams?: TQueryParams;\n  /**\n   * Don't send the error to the Provider\n   */\n  localErrorOnly?: boolean;\n}\n\n/**\n * The state of the Poll component. This should contain\n * implementation details not necessarily exposed to\n * consumers.\n */\nexport interface PollState<TData, TError> {\n  /**\n   * Are we currently polling?\n   */\n  polling: boolean;\n  /**\n   * Have we finished polling?\n   */\n  finished: boolean;\n  /**\n   * What was the last response?\n   */\n  lastResponse: Response | null;\n  /**\n   * What data are we holding in here?\n   */\n  data: GetState<TData, TError>[\"data\"];\n  /**\n   * What data did we had before?\n   */\n  previousData: GetState<TData, TError>[\"data\"];\n  /**\n   * Are we loading?\n   */\n  loading: GetState<TData, TError>[\"loading\"];\n  /**\n   * Do we currently have an error?\n   */\n  error: GetState<TData, TError>[\"error\"];\n  /**\n   * Index of the last polled response.\n   */\n  lastPollIndex?: string;\n}\n\n/**\n * The <Poll /> component without context.\n */\nclass ContextlessPoll<TData, TError, TQueryParams> extends React.Component<\n  PollProps<TData, TError, TQueryParams> & InjectedProps,\n  Readonly<PollState<TData, TError>>\n> {\n  public readonly state: Readonly<PollState<TData, TError>> = {\n    data: null,\n    previousData: null,\n    loading: !this.props.lazy,\n    lastResponse: null,\n    polling: !this.props.lazy,\n    finished: false,\n    error: null,\n  };\n\n  public static defaultProps = {\n    interval: 1000,\n    wait: 60,\n    base: \"\",\n    resolve: (data: any) => data,\n    queryParams: {},\n  };\n\n  private keepPolling = !this.props.lazy;\n\n  /**\n   * Abort controller to cancel the current fetch query\n   */\n  private abortController = new AbortController();\n  private signal = this.abortController.signal;\n\n  private isModified = (response: Response, nextData: TData) => {\n    if (response.status === 304) {\n      return false;\n    }\n    if (equal(this.state.data, nextData)) {\n      return false;\n    }\n    return true;\n  };\n\n  private getRequestOptions = () =>\n    typeof this.props.requestOptions === \"function\" ? this.props.requestOptions() : this.props.requestOptions || {};\n\n  // 304 is not a OK status code but is green in Chrome 🤦🏾‍♂️\n  private isResponseOk = (response: Response) => response.ok || response.status === 304;\n\n  /**\n   * This thing does the actual poll.\n   */\n  public cycle = async () => {\n    // Have we stopped?\n    if (!this.keepPolling) {\n      return; // stop.\n    }\n\n    // Should we stop?\n    if (this.props.until && this.props.until(this.state.data, this.state.lastResponse)) {\n      await this.stop(); // stop.\n      return;\n    }\n\n    // If we should keep going,\n    const { base, path, interval, wait } = this.props;\n    const { lastPollIndex } = this.state;\n    const requestOptions = await this.getRequestOptions();\n\n    let url = composeUrl(base!, \"\", path);\n\n    // We use a ! because it's in defaultProps\n    if (Object.keys(this.props.queryParams!).length) {\n      url += `?${qs.stringify(this.props.queryParams)}`;\n    }\n\n    const request = new Request(url, {\n      ...requestOptions,\n      headers: {\n        Prefer: `wait=${wait}s;${lastPollIndex ? `index=${lastPollIndex}` : \"\"}`,\n        ...requestOptions.headers,\n      },\n    });\n\n    try {\n      const response = await fetch(request, { signal: this.signal });\n      const { data, responseError } = await processResponse(response);\n\n      if (!this.keepPolling || this.signal.aborted) {\n        // Early return if we have stopped polling or component was unmounted\n        // to avoid memory leaks\n        return;\n      }\n\n      if (!this.isResponseOk(response) || responseError) {\n        const error = {\n          message: `Failed to poll: ${response.status} ${response.statusText}${responseError ? \" - \" + data : \"\"}`,\n          data,\n          status: response.status,\n        };\n        this.setState({ loading: false, lastResponse: response, error });\n\n        if (!this.props.localErrorOnly && this.props.onError) {\n          this.props.onError(error, () => Promise.resolve(), response);\n        }\n      } else if (this.isModified(response, data)) {\n        this.setState(prevState => ({\n          loading: false,\n          lastResponse: response,\n          previousData: prevState.data,\n          data,\n          error: null,\n          lastPollIndex: response.headers.get(\"x-polling-index\") || undefined,\n        }));\n      }\n\n      // Wait for interval to pass.\n      await new Promise(resolvePromise => setTimeout(resolvePromise, interval));\n      this.cycle(); // Do it all again!\n    } catch (e) {\n      // the only error not catched is the `fetch`, this means that we have cancelled the fetch\n    }\n  };\n\n  public start = () => {\n    this.keepPolling = true;\n    if (!this.state.polling) {\n      this.setState(() => ({ polling: true })); // let everyone know we're done here.\n    }\n    this.cycle();\n  };\n\n  public stop = () => {\n    this.keepPolling = false;\n    this.setState(() => ({ polling: false, finished: true })); // let everyone know we're done here.\n  };\n\n  public componentDidMount() {\n    const { path, lazy } = this.props;\n\n    if (path === undefined) {\n      throw new Error(\n        `[restful-react]: You're trying to poll something without a path. Please specify a \"path\" prop on your Poll component.`,\n      );\n    }\n\n    if (!lazy) {\n      this.start();\n    }\n  }\n\n  public componentWillUnmount() {\n    // Cancel the current query\n    this.abortController.abort();\n\n    // Stop the polling cycle\n    this.stop();\n  }\n\n  public render() {\n    const { lastResponse: response, previousData, data, polling, loading, error, finished } = this.state;\n    const { children, base, path, resolve } = this.props;\n\n    const meta: Meta = {\n      response,\n      absolutePath: composeUrl(base!, \"\", path),\n    };\n\n    const states: States<TData, TError> = {\n      polling,\n      loading,\n      error,\n      finished,\n    };\n\n    const actions: Actions = {\n      stop: this.stop,\n      start: this.start,\n    };\n    // data is parsed only when poll has already resolved so response is defined\n    const resolvedData = response && resolve ? resolve(data, previousData) : data;\n    return children(resolvedData, states, actions, meta);\n  }\n}\n\nfunction Poll<TData = any, TError = any, TQueryParams = { [key: string]: any }>(\n  props: PollProps<TData, TError, TQueryParams>,\n) {\n  // Compose Contexts to allow for URL nesting\n  return (\n    <RestfulReactConsumer>\n      {contextProps => {\n        const contextRequestOptions =\n          typeof contextProps.requestOptions === \"function\"\n            ? contextProps.requestOptions()\n            : contextProps.requestOptions || {};\n        const propsRequestOptions =\n          typeof props.requestOptions === \"function\" ? props.requestOptions() : props.requestOptions || {};\n\n        return (\n          <ContextlessPoll\n            {...contextProps}\n            {...props}\n            queryParams={{ ...contextProps.queryParams, ...props.queryParams }}\n            requestOptions={async () => merge(await contextRequestOptions, await propsRequestOptions)}\n          />\n        );\n      }}\n    </RestfulReactConsumer>\n  );\n}\n\nexport default Poll;\n","import * as qs from \"qs\";\nimport * as React from \"react\";\nimport RestfulReactProvider, { InjectedProps, RestfulReactConsumer, RestfulReactProviderProps } from \"./Context\";\nimport { GetState } from \"./Get\";\nimport { composePath, composeUrl } from \"./util/composeUrl\";\nimport { processResponse } from \"./util/processResponse\";\n\n/**\n * An enumeration of states that a fetchable\n * view could possibly have.\n */\nexport interface States<TData, TError> {\n  /** Is our view currently loading? */\n  loading: boolean;\n  /** Do we have an error in the view? */\n  error?: GetState<TData, TError>[\"error\"];\n}\n\nexport type MutateMethod<TData, TRequestBody> = (\n  data: TRequestBody,\n  mutateRequestOptions?: RequestInit,\n) => Promise<TData>;\n\n/**\n * Meta information returned to the fetchable\n * view.\n */\nexport interface Meta {\n  /** The absolute path of this request. */\n  absolutePath: string;\n}\n\n/**\n * Props for the <Mutate /> component.\n */\nexport interface MutateProps<TData, TError, TQueryParams, TRequestBody> {\n  /**\n   * The path at which to request data,\n   * typically composed by parents or the RestfulProvider.\n   */\n  path?: string;\n  /**\n   * @private This is an internal implementation detail in restful-react, not meant to be used externally.\n   * This helps restful-react correctly override `path`s when a new `base` property is provided.\n   */\n  __internal_hasExplicitBase?: boolean;\n  /**\n   * What HTTP verb are we using?\n   */\n  verb: \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n  /**\n   * Query parameters\n   */\n  queryParams?: TQueryParams;\n  /**\n   * An escape hatch and an alternative to `path` when you'd like\n   * to fetch from an entirely different URL.\n   *\n   */\n  base?: string;\n  /**\n   * The accumulated path from each level of parent GETs\n   *  taking the absolute and relative nature of each path into consideration\n   */\n  parentPath?: string;\n  /** Options passed into the fetch call. */\n  requestOptions?: RestfulReactProviderProps[\"requestOptions\"];\n  /**\n   * Don't send the error to the Provider\n   */\n  localErrorOnly?: boolean;\n  /**\n   * A function that recieves a mutation function, along with\n   * some metadata.\n   *\n   * @param actions - a key/value map of HTTP verbs, aliasing destroy to DELETE.\n   */\n  children: (mutate: MutateMethod<TData, TRequestBody>, states: States<TData, TError>, meta: Meta) => React.ReactNode;\n  /**\n   * Callback called after the mutation is done.\n   *\n   * @param body - Body given to mutate\n   * @param data - Response data\n   */\n  onMutate?: (body: TRequestBody, data: TData) => void;\n}\n\n/**\n * State for the <Mutate /> component. These\n * are implementation details and should be\n * hidden from any consumers.\n */\nexport interface MutateState<TData, TError> {\n  error: GetState<TData, TError>[\"error\"];\n  loading: boolean;\n}\n\n/**\n * The <Mutate /> component without Context. This\n * is a named class because it is useful in\n * debugging.\n */\nclass ContextlessMutate<TData, TError, TQueryParams, TRequestBody> extends React.Component<\n  MutateProps<TData, TError, TQueryParams, TRequestBody> & InjectedProps,\n  MutateState<TData, TError>\n> {\n  public readonly state: Readonly<MutateState<TData, TError>> = {\n    loading: false,\n    error: null,\n  };\n\n  public static defaultProps = {\n    base: \"\",\n    parentPath: \"\",\n    path: \"\",\n    queryParams: {},\n  };\n\n  /**\n   * Abort controller to cancel the current fetch query\n   */\n  private abortController = new AbortController();\n  private signal = this.abortController.signal;\n\n  public componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  public mutate = async (body: TRequestBody, mutateRequestOptions?: RequestInit) => {\n    const {\n      __internal_hasExplicitBase,\n      base,\n      parentPath,\n      path,\n      verb,\n      requestOptions: providerRequestOptions,\n    } = this.props;\n    this.setState(() => ({ error: null, loading: true }));\n\n    const makeRequestPath = () => {\n      let url: string;\n      if (__internal_hasExplicitBase) {\n        url =\n          verb === \"DELETE\" && typeof body === \"string\"\n            ? composeUrl(base!, \"\", composePath(path!, body))\n            : composeUrl(base!, \"\", path || \"\");\n      } else {\n        url =\n          verb === \"DELETE\" && typeof body === \"string\"\n            ? composeUrl(base!, parentPath!, composePath(path!, body))\n            : composeUrl(base!, parentPath!, path!);\n      }\n\n      // We use ! because it's in defaultProps\n      if (Object.keys(this.props.queryParams!).length) {\n        url += `?${qs.stringify(this.props.queryParams)}`;\n      }\n      return url;\n    };\n\n    const request = new Request(makeRequestPath(), {\n      method: verb,\n      body: typeof body === \"object\" ? JSON.stringify(body) : body,\n      ...(typeof providerRequestOptions === \"function\" ? providerRequestOptions() : providerRequestOptions),\n      ...mutateRequestOptions,\n      headers: {\n        \"content-type\": typeof body === \"object\" ? \"application/json\" : \"text/plain\",\n        ...(typeof providerRequestOptions === \"function\"\n          ? (await providerRequestOptions()).headers\n          : (providerRequestOptions || {}).headers),\n        ...(mutateRequestOptions ? mutateRequestOptions.headers : {}),\n      },\n    } as RequestInit); // Type assertion for version of TypeScript that can't yet discriminate.\n\n    let response: Response;\n    try {\n      response = await fetch(request, { signal: this.signal });\n    } catch (e) {\n      const error = {\n        message: `Failed to fetch: ${e.message}`,\n        data: \"\",\n      };\n\n      this.setState({\n        error,\n        loading: false,\n      });\n\n      if (!this.props.localErrorOnly && this.props.onError) {\n        this.props.onError(error, () => this.mutate(body, mutateRequestOptions));\n      }\n\n      throw error;\n    }\n\n    const { data, responseError } = await processResponse(response);\n\n    // avoid state updates when component has been unmounted\n    if (this.signal.aborted) {\n      return;\n    }\n    if (!response.ok || responseError) {\n      const error = {\n        data,\n        message: `Failed to fetch: ${response.status} ${response.statusText}`,\n        status: response.status,\n      };\n\n      this.setState({\n        error,\n        loading: false,\n      });\n\n      if (!this.props.localErrorOnly && this.props.onError) {\n        this.props.onError(error, () => this.mutate(body, mutateRequestOptions), response);\n      }\n\n      throw error;\n    }\n\n    this.setState({ loading: false });\n\n    if (this.props.onMutate) {\n      this.props.onMutate(body, data);\n    }\n\n    return data;\n  };\n\n  public render() {\n    const { children, path, base, parentPath } = this.props;\n    const { error, loading } = this.state;\n\n    return children(this.mutate, { loading, error }, { absolutePath: composeUrl(base!, parentPath!, path!) });\n  }\n}\n\n/**\n * The <Mutate /> component _with_ context.\n * Context is used to compose path props,\n * and to maintain the base property against\n * which all requests will be made.\n *\n * We compose Consumers immediately with providers\n * in order to provide new `parentPath` props that contain\n * a segment of the path, creating composable URLs.\n */\nfunction Mutate<TData = any, TError = any, TQueryParams = { [key: string]: any }, TRequestBody = any>(\n  props: MutateProps<TData, TError, TQueryParams, TRequestBody>,\n) {\n  return (\n    <RestfulReactConsumer>\n      {contextProps => (\n        <RestfulReactProvider {...contextProps} parentPath={composePath(contextProps.parentPath, props.path!)}>\n          <ContextlessMutate<TData, TError, TQueryParams, TRequestBody>\n            {...contextProps}\n            {...props}\n            queryParams={{ ...contextProps.queryParams, ...props.queryParams } as TQueryParams}\n            __internal_hasExplicitBase={Boolean(props.base)}\n          />\n        </RestfulReactProvider>\n      )}\n    </RestfulReactConsumer>\n  );\n}\n\nexport default Mutate;\n","import isEqualWith from \"lodash/isEqualWith\";\nimport React, { useEffect, useRef } from \"react\";\n\n/**\n * Custom version of isEqual to handle function comparison\n */\nconst isEqual = (x: any, y: any) =>\n  isEqualWith(x, y, (a, b) => {\n    // Deal with the function comparison case\n    if (typeof a === \"function\" && typeof b === \"function\") {\n      return a.toString() === b.toString();\n    }\n    // Fallback on the method\n    return undefined;\n  });\n\nfunction useDeepCompareMemoize(value: Readonly<any>) {\n  const ref = useRef<any>();\n\n  if (!isEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\n/**\n * Accepts a function that contains imperative, possibly effectful code.\n *\n * This is the deepCompare version of the `React.useEffect` hooks (that is shallowed compare)\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list change.\n *\n * @see https://gist.github.com/kentcdodds/fb8540a05c43faf636dd68647747b074#gistcomment-2830503\n */\nexport function useDeepCompareEffect<T>(effect: React.EffectCallback, deps: T) {\n  useEffect(effect, useDeepCompareMemoize(deps));\n}\n","import { useCallback, useRef } from \"react\";\n\nfunction createAbortController() {\n  try {\n    return new AbortController();\n  } catch {\n    return undefined;\n  }\n}\n\nexport function useAbort() {\n  const instance = useRef(createAbortController());\n\n  const abort = useCallback(() => {\n    if (instance && instance.current) {\n      instance.current.abort();\n      instance.current = createAbortController();\n    }\n  }, [instance]);\n\n  return {\n    abort,\n    getAbortSignal() {\n      return instance?.current?.signal;\n    },\n  };\n}\n","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Cancelable, DebounceSettings } from \"lodash\";\nimport debounce from \"lodash/debounce\";\nimport merge from \"lodash/merge\";\nimport qs, { IStringifyOptions } from \"qs\";\nimport url from \"url\";\n\nimport { Context, RestfulReactProviderProps } from \"./Context\";\nimport { GetState } from \"./Get\";\nimport { processResponse } from \"./util/processResponse\";\nimport { useDeepCompareEffect } from \"./util/useDeepCompareEffect\";\nimport { useAbort } from \"./useAbort\";\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface UseGetProps<TData, TQueryParams> {\n  /**\n   * The path at which to request data,\n   * typically composed by parent Gets or the RestfulProvider.\n   */\n  path: string;\n  /** Options passed into the fetch call. */\n  requestOptions?: RestfulReactProviderProps[\"requestOptions\"];\n  /**\n   * Query parameters\n   */\n  queryParams?: TQueryParams;\n  /**\n   * Query parameter stringify options\n   */\n  queryParamStringifyOptions?: IStringifyOptions;\n  /**\n   * Don't send the error to the Provider\n   */\n  localErrorOnly?: boolean;\n  /**\n   * A function to resolve data return from the backend, most typically\n   * used when the backend response needs to be adapted in some way.\n   */\n  resolve?: (data: any) => TData;\n  /**\n   * Should we fetch data at a later stage?\n   */\n  lazy?: boolean;\n  /**\n   * An escape hatch and an alternative to `path` when you'd like\n   * to fetch from an entirely different URL.\n   *\n   */\n  base?: string;\n  /**\n   * How long do we wait between subsequent requests?\n   * Uses [lodash's debounce](https://lodash.com/docs/4.17.10#debounce) under the hood.\n   */\n  debounce?:\n    | {\n        wait?: number;\n        options: DebounceSettings;\n      }\n    | boolean\n    | number;\n}\n\nexport function resolvePath<TQueryParams>(\n  base: string,\n  path: string,\n  queryParams: TQueryParams,\n  queryParamOptions: IStringifyOptions = {},\n) {\n  const appendedBase = base.endsWith(\"/\") ? base : `${base}/`;\n  const trimmedPath = path.startsWith(\"/\") ? path.slice(1) : path;\n\n  return url.resolve(\n    appendedBase,\n    Object.keys(queryParams).length ? `${trimmedPath}?${qs.stringify(queryParams, queryParamOptions)}` : trimmedPath,\n  );\n}\n\nasync function _fetchData<TData, TError, TQueryParams>(\n  props: UseGetProps<TData, TQueryParams>,\n  state: GetState<TData, TError>,\n  setState: (newState: GetState<TData, TError>) => void,\n  context: RestfulReactProviderProps,\n  abort: () => void,\n  getAbortSignal: () => AbortSignal | undefined,\n) {\n  const { base = context.base, path, resolve = (d: any) => d as TData, queryParams = {} } = props;\n\n  if (state.loading) {\n    // Abort previous requests\n    abort();\n  }\n\n  if (state.error || !state.loading) {\n    setState({ ...state, error: null, loading: true });\n  }\n\n  const requestOptions =\n    (typeof props.requestOptions === \"function\" ? await props.requestOptions() : props.requestOptions) || {};\n\n  const contextRequestOptions =\n    (typeof context.requestOptions === \"function\" ? await context.requestOptions() : context.requestOptions) || {};\n\n  const signal = getAbortSignal();\n\n  const request = new Request(\n    resolvePath(base, path, { ...context.queryParams, ...queryParams }, props.queryParamStringifyOptions || {}),\n    merge({}, contextRequestOptions, requestOptions, { signal }),\n  );\n\n  try {\n    const response = await fetch(request);\n    const { data, responseError } = await processResponse(response);\n\n    if (signal && signal.aborted) {\n      return;\n    }\n\n    if (!response.ok || responseError) {\n      const error = {\n        message: `Failed to fetch: ${response.status} ${response.statusText}${responseError ? \" - \" + data : \"\"}`,\n        data,\n        status: response.status,\n      };\n\n      setState({ ...state, loading: false, error });\n\n      if (!props.localErrorOnly && context.onError) {\n        context.onError(error, () => _fetchData(props, state, setState, context, abort, getAbortSignal), response);\n      }\n      return;\n    }\n\n    setState({ ...state, error: null, loading: false, data: resolve(data) });\n  } catch (e) {\n    // avoid state updates when component has been unmounted\n    // and when fetch/processResponse threw an error\n    if (signal && signal.aborted) {\n      return;\n    }\n\n    const error = {\n      message: `Failed to fetch: ${e.message}`,\n      data: e.message,\n    };\n\n    setState({\n      ...state,\n      loading: false,\n      error,\n    });\n\n    if (!props.localErrorOnly && context.onError) {\n      context.onError(error, () => _fetchData(props, state, setState, context, abort, getAbortSignal));\n    }\n  }\n}\n\ntype FetchData = typeof _fetchData;\ntype CancellableFetchData = FetchData | (FetchData & Cancelable);\ntype RefetchOptions<TData, TQueryParams> = Partial<Omit<UseGetProps<TData, TQueryParams>, \"lazy\">>;\n\nconst isCancellable = <T extends (...args: any[]) => any>(func: T): func is T & Cancelable => {\n  return typeof (func as any).cancel === \"function\" && typeof (func as any).flush === \"function\";\n};\n\nexport interface UseGetReturn<TData, TError, TQueryParams = {}> extends GetState<TData, TError> {\n  /**\n   * Absolute path resolved from `base` and `path` (context & local)\n   */\n  absolutePath: string;\n  /**\n   * Cancel the current fetch\n   */\n  cancel: () => void;\n  /**\n   * Refetch\n   */\n  refetch: (options?: RefetchOptions<TData, TQueryParams>) => Promise<void>;\n}\n\nexport function useGet<TData = any, TError = any, TQueryParams = { [key: string]: any }>(\n  path: string,\n  props?: Omit<UseGetProps<TData, TQueryParams>, \"path\">,\n): UseGetReturn<TData, TError, TQueryParams>;\n\nexport function useGet<TData = any, TError = any, TQueryParams = { [key: string]: any }>(\n  props: UseGetProps<TData, TQueryParams>,\n): UseGetReturn<TData, TError, TQueryParams>;\n\nexport function useGet<TData = any, TError = any, TQueryParams = { [key: string]: any }>() {\n  const props: UseGetProps<TData, TError> =\n    typeof arguments[0] === \"object\" ? arguments[0] : { ...arguments[1], path: arguments[0] };\n\n  const context = useContext(Context);\n\n  const fetchData = useCallback<CancellableFetchData>(\n    typeof props.debounce === \"object\"\n      ? debounce<FetchData>(_fetchData, props.debounce.wait, props.debounce.options)\n      : typeof props.debounce === \"number\"\n      ? debounce<FetchData>(_fetchData, props.debounce)\n      : props.debounce\n      ? debounce<FetchData>(_fetchData)\n      : _fetchData,\n    [props.debounce],\n  );\n\n  // Cancel fetchData on unmount (if debounce)\n  useEffect(() => (isCancellable(fetchData) ? () => fetchData.cancel() : undefined), [fetchData]);\n\n  const [state, setState] = useState<GetState<TData, TError>>({\n    data: null,\n    response: null,\n    loading: !props.lazy,\n    error: null,\n  });\n\n  const { abort, getAbortSignal } = useAbort();\n\n  useDeepCompareEffect(() => {\n    if (!props.lazy) {\n      fetchData(props, state, setState, context, abort, getAbortSignal);\n    }\n\n    return () => {\n      abort();\n    };\n  }, [props.lazy, props.path, props.base, props.resolve, props.queryParams, props.requestOptions, abort]);\n\n  return {\n    ...state,\n    absolutePath: resolvePath(\n      props.base || context.base,\n      props.path,\n      {\n        ...context.queryParams,\n        ...props.queryParams,\n      },\n      props.queryParamStringifyOptions,\n    ),\n    cancel: () => {\n      setState({\n        ...state,\n        loading: false,\n      });\n      abort();\n    },\n    refetch: (options: RefetchOptions<TData, TQueryParams> = {}) =>\n      fetchData({ ...props, ...options }, state, setState, context, abort, getAbortSignal),\n  };\n}\n","import merge from \"lodash/merge\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Context } from \"./Context\";\nimport { MutateMethod, MutateState } from \"./Mutate\";\nimport { Omit, resolvePath, UseGetProps } from \"./useGet\";\nimport { processResponse } from \"./util/processResponse\";\nimport { useAbort } from \"./useAbort\";\n\nexport interface UseMutateProps<TData, TQueryParams, TRequestBody>\n  extends Omit<UseGetProps<TData, TQueryParams>, \"lazy\" | \"debounce\"> {\n  /**\n   * What HTTP verb are we using?\n   */\n  verb: \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n  /**\n   * Callback called after the mutation is done.\n   *\n   * @param body - Body given to mutate\n   * @param data - Response data\n   */\n  onMutate?: (body: TRequestBody, data: TData) => void;\n}\n\nexport interface UseMutateReturn<TData, TError, TRequestBody> extends MutateState<TData, TError> {\n  /**\n   * Cancel the current fetch\n   */\n  cancel: () => void;\n  /**\n   * Call the mutate endpoint\n   */\n  mutate: MutateMethod<TData, TRequestBody>;\n}\n\nexport function useMutate<TData = any, TError = any, TQueryParams = { [key: string]: any }, TRequestBody = any>(\n  props: UseMutateProps<TData, TQueryParams, TRequestBody>,\n): UseMutateReturn<TData, TError, TRequestBody>;\n\nexport function useMutate<TData = any, TError = any, TQueryParams = { [key: string]: any }, TRequestBody = any>(\n  verb: UseMutateProps<TData, TQueryParams, TRequestBody>[\"verb\"],\n  path: string,\n  props?: Omit<UseMutateProps<TData, TQueryParams, TRequestBody>, \"path\" | \"verb\">,\n): UseMutateReturn<TData, TError, TRequestBody>;\n\nexport function useMutate<\n  TData = any,\n  TError = any,\n  TQueryParams = { [key: string]: any },\n  TRequestBody = any\n>(): UseMutateReturn<TData, TError, TRequestBody> {\n  const props: UseMutateProps<TData, TQueryParams, TRequestBody> =\n    typeof arguments[0] === \"object\" ? arguments[0] : { ...arguments[2], path: arguments[1], verb: arguments[0] };\n\n  const context = useContext(Context);\n  const { verb, base = context.base, path, queryParams = {}, resolve } = props;\n  const isDelete = verb === \"DELETE\";\n\n  const [state, setState] = useState<MutateState<TData, TError>>({\n    error: null,\n    loading: false,\n  });\n\n  const { abort, getAbortSignal } = useAbort();\n\n  // Cancel the fetch on unmount\n  useEffect(() => () => abort(), [abort]);\n\n  const mutate = useCallback<MutateMethod<TData, TRequestBody>>(\n    async (body: TRequestBody, mutateRequestOptions?: RequestInit) => {\n      if (state.error || !state.loading) {\n        setState(prevState => ({ ...prevState, loading: true, error: null }));\n      }\n\n      if (state.loading) {\n        // Abort previous requests\n        abort();\n      }\n\n      const propsRequestOptions =\n        (typeof props.requestOptions === \"function\" ? await props.requestOptions() : props.requestOptions) || {};\n\n      const contextRequestOptions =\n        (typeof context.requestOptions === \"function\" ? await context.requestOptions() : context.requestOptions) || {};\n\n      const options: RequestInit = {\n        method: verb,\n        headers: {\n          \"content-type\": typeof body === \"object\" ? \"application/json\" : \"text/plain\",\n        },\n      };\n\n      if (!isDelete) {\n        options.body = typeof body === \"object\" ? JSON.stringify(body) : ((body as unknown) as string);\n      }\n\n      const signal = getAbortSignal();\n\n      const request = new Request(\n        resolvePath(\n          base,\n          isDelete ? `${path}/${body}` : path,\n          { ...context.queryParams, ...queryParams },\n          props.queryParamStringifyOptions,\n        ),\n        merge({}, contextRequestOptions, options, propsRequestOptions, mutateRequestOptions, { signal }),\n      );\n\n      let response: Response;\n      try {\n        response = await fetch(request);\n      } catch (e) {\n        const error = {\n          message: `Failed to fetch: ${e.message}`,\n          data: \"\",\n        };\n\n        setState({\n          error,\n          loading: false,\n        });\n\n        if (!props.localErrorOnly && context.onError) {\n          context.onError(error, () => mutate(body, mutateRequestOptions));\n        }\n\n        throw error;\n      }\n\n      const { data: rawData, responseError } = await processResponse(response);\n\n      let data: TData | any; // `any` -> data in error case\n      try {\n        data = resolve ? resolve(rawData) : rawData;\n      } catch (e) {\n        // avoid state updates when component has been unmounted\n        // and when fetch/processResponse threw an error\n        if (signal && signal.aborted) {\n          return;\n        }\n\n        const error = {\n          data: e.message,\n          message: `Failed to resolve: ${e.message}`,\n        };\n\n        setState(prevState => ({\n          ...prevState,\n          error,\n          loading: false,\n        }));\n        throw e;\n      }\n\n      if (signal && signal.aborted) {\n        return;\n      }\n\n      if (!response.ok || responseError) {\n        const error = {\n          data,\n          message: `Failed to fetch: ${response.status} ${response.statusText}`,\n          status: response.status,\n        };\n\n        setState(prevState => ({\n          ...prevState,\n          error,\n          loading: false,\n        }));\n\n        if (!props.localErrorOnly && context.onError) {\n          context.onError(error, () => mutate(body), response);\n        }\n\n        throw error;\n      }\n\n      setState(prevState => ({ ...prevState, loading: false }));\n\n      if (props.onMutate) {\n        props.onMutate(body, data);\n      }\n\n      return data;\n    },\n    /* eslint-disable react-hooks/exhaustive-deps */\n    [context.base, context.requestOptions, context.resolve, state.error, state.loading, path, abort, getAbortSignal],\n  );\n\n  return {\n    ...state,\n    mutate,\n    cancel: () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: false,\n      }));\n      abort();\n    },\n  };\n}\n"],"names":["Context","React","base","parentPath","resolve","data","requestOptions","onError","noop","queryParams","RestfulReactProvider","render","props","children","value","Provider","RestfulReactConsumer","Consumer","composeUrl","path","composedPath","composePath","startsWith","endsWith","slice","length","url","processResponse","response","status","undefined","responseError","headers","get","includes","json","e","message","text","resolveData","resolvedData","error","resolveError","resolvedDataOrPromise","then","err","JSON","stringify","ContextlessGet","AbortController","abortController","signal","loading","lazy","extraOptions","extraHeaders","Headers","options","requestPath","thisRequestOptions","__internal_hasExplicitBase","state","setState","makeRequestPath","Object","keys","qs","getRequestOptions","request","Request","fetch","aborted","ok","statusText","localErrorOnly","resolved","debounce","wait","componentDidMount","componentDidUpdate","prevProps","isEqual","toString","componentWillUnmount","abort","refetch","absolutePath","unresolvedData","Get","contextProps","Boolean","ContextlessPoll","previousData","lastResponse","polling","finished","nextData","equal","interval","lastPollIndex","Prefer","keepPolling","isResponseOk","Promise","isModified","prevState","resolvePromise","setTimeout","cycle","until","stop","Error","start","meta","states","actions","Poll","contextRequestOptions","propsRequestOptions","merge","ContextlessMutate","body","mutateRequestOptions","mutate","onMutate","method","verb","providerRequestOptions","Mutate","x","y","isEqualWith","a","b","useDeepCompareMemoize","ref","useRef","current","useDeepCompareEffect","effect","deps","useEffect","createAbortController","useAbort","instance","useCallback","getAbortSignal","_fetchData","context","resolvePath","queryParamStringifyOptions","d","queryParamOptions","appendedBase","trimmedPath","isCancellable","func","cancel","flush","useGet","arguments","useContext","fetchData","useState","useMutate","isDelete","rawData"],"mappings":"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"}