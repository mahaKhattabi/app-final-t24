{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/aatf-views-very-last/src/components/Autocomplete.tsx\";\nimport React, { useState } from \"react\";\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, Input } from \"reactstrap\";\nimport _ from \"lodash\";\nimport { useGet } from \"restful-react\";\nimport Loading from \"./Loading\";\nexport default function Autocomplete(props) {\n  const [search, setSearch] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    data,\n    loading,\n    error\n  } = useGet(props.url(search));\n\n  const dataArray = d => {\n    if (d) {\n      if (props.toArray) return props.toArray(d);else return d;\n    } else return [];\n  };\n\n  const options = dataArray(data).filter(o => props.optionFilter(o, search));\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n    onClick: toggle,\n    style: {\n      maxWidth: 400\n    },\n    placeholder: props.placeholder,\n    onChange: e => setSearch(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), loading && search !== \"\" && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 36\n    }\n  }, \"Loading options...\"), error && search !== \"\" && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }\n  }, error.message), options && /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n    isOpen: options.length > 0 && isOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    tag: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DropdownMenu, {\n    className: \"dropdown-black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, _.take(options, props.maxItems).map((e, k) => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: k,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, props.option(e))))));\n}","map":{"version":3,"sources":["/Users/mac/Desktop/aatf-views-very-last/src/components/Autocomplete.tsx"],"names":["React","useState","UncontrolledDropdown","DropdownToggle","DropdownMenu","Input","_","useGet","Loading","Autocomplete","props","search","setSearch","isOpen","setIsOpen","data","loading","error","url","dataArray","d","toArray","options","filter","o","optionFilter","toggle","maxWidth","placeholder","e","target","value","message","length","take","maxItems","map","k","option"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,oBADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,KAJF,QAKO,YALP;AAMA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAWA,eAAe,SAASC,YAAT,CAA4BC,KAA5B,EAA4D;AACzE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAM;AAAEc,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BV,MAAM,CAAIG,KAAK,CAACQ,GAAN,CAAUP,MAAV,CAAJ,CAAvC;;AAEA,QAAMQ,SAAS,GAAIC,CAAD,IAAY;AAC5B,QAAIA,CAAJ;AACE,UAAIV,KAAK,CAACW,OAAV,EAAmB,OAAOX,KAAK,CAACW,OAAN,CAAcD,CAAd,CAAP,CAAnB,KACK,OAAOA,CAAP;AAFP,WAGK,OAAO,EAAP;AACN,GALD;;AAOA,QAAME,OAAO,GAAGH,SAAS,CAACJ,IAAD,CAAT,CAAgBQ,MAAhB,CAAwBC,CAAD,IAAOd,KAAK,CAACe,YAAN,CAAmBD,CAAnB,EAAsBb,MAAtB,CAA9B,CAAhB;;AAEA,QAAMe,MAAM,GAAG,MAAMZ,SAAS,CAAC,CAACD,MAAF,CAA9B;;AAEA,sBACE,uDACE,oBAAC,KAAD;AACE,IAAA,OAAO,EAAEa,MADX;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFT;AAGE,IAAA,WAAW,EAAEjB,KAAK,CAACkB,WAHrB;AAIE,IAAA,QAAQ,EAAGC,CAAD,IAAOjB,SAAS,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGf,OAAO,IAAIL,MAAM,KAAK,EAAtB,iBAA4B,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAP/B,EAQGM,KAAK,IAAIN,MAAM,KAAK,EAApB,iBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIM,KAAK,CAACe,OAAV,CAR7B,EASGV,OAAO,iBACN,oBAAC,oBAAD;AACE,IAAA,MAAM,EAAEA,OAAO,CAACW,MAAR,GAAiB,CAAjB,IAAsBpB,MADhC;AAEE,IAAA,MAAM,EAAEa,MAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAC,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,CAAC,CAAC4B,IAAF,CAAOZ,OAAP,EAAgBZ,KAAK,CAACyB,QAAtB,EAAgCC,GAAhC,CAAoC,CAACP,CAAD,EAAIQ,CAAJ,kBACnC,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyB3B,KAAK,CAAC4B,MAAN,CAAaT,CAAb,CAAzB,CADD,CADH,CALF,CAVJ,CADF;AAyBD","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport _ from \"lodash\";\r\nimport { useGet } from \"restful-react\";\r\nimport Loading from \"./Loading\";\r\n\r\ninterface AutocompleteProps<T, E> {\r\n  url: (search: string) => string;\r\n  toArray?: (e: E) => T[];\r\n  option: (element: T) => JSX.Element;\r\n  optionFilter: (element: T, search: string) => boolean;\r\n  maxItems: number;\r\n  placeholder: string;\r\n}\r\n\r\nexport default function Autocomplete<T, E>(props: AutocompleteProps<T, E>) {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const { data, loading, error } = useGet<E>(props.url(search));\r\n\r\n  const dataArray = (d: any) => {\r\n    if (d)\r\n      if (props.toArray) return props.toArray(d);\r\n      else return d as T[];\r\n    else return [];\r\n  };\r\n\r\n  const options = dataArray(data).filter((o) => props.optionFilter(o, search));\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <>\r\n      <Input\r\n        onClick={toggle}\r\n        style={{ maxWidth: 400 }}\r\n        placeholder={props.placeholder}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      {loading && search !== \"\" && <Loading>Loading options...</Loading>}\r\n      {error && search !== \"\" && <p>{error.message}</p>}\r\n      {options && (\r\n        <UncontrolledDropdown\r\n          isOpen={options.length > 0 && isOpen}\r\n          toggle={toggle}\r\n        >\r\n          <DropdownToggle tag='a'></DropdownToggle>\r\n          <DropdownMenu className='dropdown-black'>\r\n            {_.take(options, props.maxItems).map((e, k) => (\r\n              <React.Fragment key={k}>{props.option(e)}</React.Fragment>\r\n            ))}\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}